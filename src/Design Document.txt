Group #20
Sarah Rieger (U47427637)
Catherine Kim (U51788489)

Classes:

Items: This is a completely new class that we added because it allows encapsulation of items that can be used or stored in a hero’s backpack (armory, weapon, potions, spells) and has a constructor and attributes that all items share and can call.

Wallet: This class is exactly the same as the previous implementation of Catherine’s code with the purpose to add a level of abstraction to money transactions within the market or after a fight

Characters: This class is from the previous implementation of Catherine's code with the added difference of adding inherited attributes such as nickname, position, lane for both monster and heroes in order to have encapsulation under a general Character array and other such uses.
Monster: Abstract class to Dragons, Exoskeletons, and spirits from the previous implementation of Catherine's code with the added difference of a constructor that initializes attributes that subclasses will share and call through keyword super for more clear inheritance. Furthermore, new attributes specific to this new quest were added such as lane or nexus to be utilized for inheritance among subclasses.

Dragons: class that has the general attributes and constructor that any specific dragon characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
  	Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific dragon characters have other effects/powers in updated versions of the game:
  -Desghidorrah
  -Chrysophylax
  -BunsenBurner
  -Natsunomeryu
  -TheScaleless
  -Kas_Ethelinh
  -Alexstraszan
  -Phaarthurnax
  -D_Maleficent
  -TheWeatherbe
Exoskeletons: class that has the general attributes and constructor that any specific exoskeleton characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
  	Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific exoskeleton characters have other effects/powers in updated versions of the game:
  -Cyrrollalee
  -Brandobaris
  -BigBad-Wolf
  -WickedWitch
  -Aasterinian
  -Chronepsish
  -Kiaransalee
  -St_Shargaas
  -Merrshaullk
  -St_Yeenoghu
Spirits: class that has the general attributes and constructor that any specific spirit characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific dragon characters have other effects/powers in updated versions of the game:
  -Andrealphus
  -Aim-Haborym
  -Andromalius
  -Chiang-shih
  -FallenAngel
  -Ereshkigall
  -Melchiresas
  -Jormunngand
  -Rakkshasass
  -Taltecuhtli
BackPack: This class is exactly as in the previous implementation of Catherine's code that adds a layer of abstraction to items to better understand that a hero can have items in his inventory to use
Hero: Abstract class to Paladins, Warriors and Sorcerers from the previous implementation of Catherine's code with the added difference of hero specific functions such as revive (back in nexus with full health) in order to allow for inheritance and no repeated code within the subclasses. Furthermore, another key difference is the function makeMove which was implemented but inherited from Characters because movement is a common function that characters will have but is specific to each character, which shows polymorphism.

Paladins: class that has the general attributes and constructor that any specific paladin characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific paladin characters have other effects/powers in updated versions of the game:
  -Solonor_Thelandira
  -Sehanine_Moonbow
  -Skoraeus_Stonebones
Sorcerer: class that has the general attributes and constructor that any specific paladin characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
	Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific sorcerer characters have other effects/powers in updated
  -Carl_Clittercold (renamed due to duplicate)
  -Rillifane_Rallathil
  -Segojan_Earthcaller
  -Wkoraeus_Wtonebones (renamed due to duplicate)

Warrior:  class that has the general attributes and constructor that any specific paladin characters will invoke using the keyword super from the previous implementation of Catherine's code with the added difference that no attributes are repeated to keep inheritance linear and clear.
	Subclasses that allow for scalability (are exactly as in the previous implementation of Catherine's code) should specific warrior characters have other effects/powers in updated
  -Gaerdal_Ironhand
  -Mehanine_Sonnbow
  -Muamman_Duathall
  -Flandal_Steelskin

Armory: This class is exactly as in the previous implementation of Catherine's code with the added difference of extending the item class for encapsulation and allows for inheritance of functions that all subclasses should have
  	Subclasses (that are exactly as in the previous implementation of Catherine's code) that allow for scalability should specific armor pieces have other effects in updated versions of the game:
  -Breastplate (duplicate ignored in provided file)
  -Full_Body_Armor
  -Platinum_Shield
  -Wizard_Shield
  -Speed_Boots

Spells: abstract class to fire, ice, and lightning spells, this class is exactly as in the previous implementation of Catherine's code with the added difference of extending the item class for encapsulation and allows for inheritance of functions that all subclasses should have as well as access to all general spells (so encapsulation to types of spells)
FireSpell: superclass to specific fire spells (that is exactly as in the previous implementation of Catherine's code) that allow for scalability should specific spell pieces have other effects in updated versions of the game:
  -Flame_Tornado
  -Breath_of_Fire (duplicate removed)
  -Heat_Wave(duplicate removed)
  -Lava_Commet
IceSpell: superclass to specific fire spells (that is exactly as in the previous implementation of Catherine's code) that allow for scalability should specific spell pieces have other effects in updated versions of the game:
  -Snow_Canon
  -Ice_Blade (duplicate removed)
  -Frost_Blizzard(duplicate removed)
  -Arctic_storm
LightningSpell: superclass to specific fire spells (that is exactly as in the previous implementation of Catherine's code) that allow for scalability should specific spell pieces have other effects in updated versions of the game:

  -LightningDagger (duplicate removed)
  -Thunder_Blast
  -Spark_Needles(duplicate removed)
  -Electric_Arrows

Potion: This class is exactly as in the previous implementation of Catherine's code with the added difference of extending the item class for encapsulation and allows for inheritance of functions that all subclasses should have
  	Subclasses (that are exactly as in the previous implementation of Catherine's code) that allow for scalability should specific potion pieces have other effects in updated versions of the game:
  -Healing_Potion
  -Strength_Potion
  -Magic_Potion
  -Luck_Elixir
  -Mermaid_Tears
  -Ambrosia
Weaponry: This class is exactly as in the previous implementation of Catherine's code with the added difference of extending the item class for encapsulation and allows for inheritance of functions that all subclasses should have
  	Subclasses (that are exactly as in the previous implementation of Catherine's code) that allow for scalability should specific weapon pieces have other effects in updated versions of the game:
  -Sword
  -Bow
  -Scythe
  -Axe
  -Shield
  -TSwords
  -Dagger

Team: This is a completely new class that we added based off of the original Team object of Catherine's code that is actually the abstract class to MonsterTeam and HeroTeam because we decided that for better encapsulation of the two teams as well as scalability because then should the game ever need more teams of any other type of character, another team can easily be added under Team.
  -MonsterTeam + HeroTeam both are completely new classes added for better encapsulation and inheritance.

Buyable Interface: This class is exactly as in the previous implementation of Catherine's code that shows the relationship to items that can be sold or bought from the market and allows for scalability should there be items in the future that don’t share such characteristics in the game.

Quest driver: This class was taken from the previous implementation of Catherine’s code with only slight changes to no longer include the fight/fight driver code. This class allows a level of abstraction to initializing many items/characters for the quest game, without changing any aspects of such objects.

Game Driver: This class was kept from Catherine’s old code without significant alteration. It’s purpose is to encapsulate all function calls and object instantiation relating to playing the game.

Board Driver: This class was kept from Catherine’s old code, but modified. It’s intention is to encapsulate all actions and function calls related to the board. Movement mechanisms were altered, and we also added additional options like teleport.

Board class: This class was kept from Catherine’s old code, but modified. We added lanes here. We also put teleportation functionalities in here in order to better encapsulate any sort of board modification (like changing cell’s contents as a byproduct of movement). It is still scalable, as it was in it’s previous iteration. The board size can be modified and the size of the lanes will adjust accordingly.

Board cell: We kept this class from Catherine’s old code, but added additional functionality. It now also includes the appropriate cell actions (healing, increasing stats, etc) for each different type of cell. There are also new functions to check and work with the cell contents. These things provide for better encapsulation of cell functionality. It also allows for scalability if we wanted to add more cell types later.

Lanes: This is a new class specifically for this portion of the Quest. It’s primary use is to keep heroes spawning properly, in their own lanes, and be able to get back to their own nexuses. It also helps with the spawning of monsters, and the movement of all characters. This helps to encapsulate these functionalities better

